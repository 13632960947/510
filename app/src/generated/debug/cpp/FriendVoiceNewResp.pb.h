// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FriendVoiceNewResp.proto

#ifndef PROTOBUF_FriendVoiceNewResp_2eproto__INCLUDED
#define PROTOBUF_FriendVoiceNewResp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace jjd {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_FriendVoiceNewResp_2eproto();
void protobuf_InitDefaults_FriendVoiceNewResp_2eproto();
void protobuf_AssignDesc_FriendVoiceNewResp_2eproto();
void protobuf_ShutdownFile_FriendVoiceNewResp_2eproto();

class FriendVoiceNewResp;
class FriendVoiceNewResp_ObjNews;
class FriendVoiceNewResp_Result;

// ===================================================================

class FriendVoiceNewResp_Result : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jjd.FriendVoiceNewResp.Result) */ {
 public:
  FriendVoiceNewResp_Result();
  virtual ~FriendVoiceNewResp_Result();

  FriendVoiceNewResp_Result(const FriendVoiceNewResp_Result& from);

  inline FriendVoiceNewResp_Result& operator=(const FriendVoiceNewResp_Result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendVoiceNewResp_Result& default_instance();

  static const FriendVoiceNewResp_Result* internal_default_instance();

  void Swap(FriendVoiceNewResp_Result* other);

  // implements Message ----------------------------------------------

  inline FriendVoiceNewResp_Result* New() const { return New(NULL); }

  FriendVoiceNewResp_Result* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendVoiceNewResp_Result& from);
  void MergeFrom(const FriendVoiceNewResp_Result& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FriendVoiceNewResp_Result* other);
  void UnsafeMergeFrom(const FriendVoiceNewResp_Result& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 oldTime = 1;
  bool has_oldtime() const;
  void clear_oldtime();
  static const int kOldTimeFieldNumber = 1;
  ::google::protobuf::int64 oldtime() const;
  void set_oldtime(::google::protobuf::int64 value);

  // required int64 newTime = 2;
  bool has_newtime() const;
  void clear_newtime();
  static const int kNewTimeFieldNumber = 2;
  ::google::protobuf::int64 newtime() const;
  void set_newtime(::google::protobuf::int64 value);

  // repeated .jjd.FriendVoiceNewResp.ObjNews objNews = 3;
  int objnews_size() const;
  void clear_objnews();
  static const int kObjNewsFieldNumber = 3;
  const ::jjd::FriendVoiceNewResp_ObjNews& objnews(int index) const;
  ::jjd::FriendVoiceNewResp_ObjNews* mutable_objnews(int index);
  ::jjd::FriendVoiceNewResp_ObjNews* add_objnews();
  ::google::protobuf::RepeatedPtrField< ::jjd::FriendVoiceNewResp_ObjNews >*
      mutable_objnews();
  const ::google::protobuf::RepeatedPtrField< ::jjd::FriendVoiceNewResp_ObjNews >&
      objnews() const;

  // required int64 allCount = 4;
  bool has_allcount() const;
  void clear_allcount();
  static const int kAllCountFieldNumber = 4;
  ::google::protobuf::int64 allcount() const;
  void set_allcount(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:jjd.FriendVoiceNewResp.Result)
 private:
  inline void set_has_oldtime();
  inline void clear_has_oldtime();
  inline void set_has_newtime();
  inline void clear_has_newtime();
  inline void set_has_allcount();
  inline void clear_has_allcount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jjd::FriendVoiceNewResp_ObjNews > objnews_;
  ::google::protobuf::int64 oldtime_;
  ::google::protobuf::int64 newtime_;
  ::google::protobuf::int64 allcount_;
  friend void  protobuf_InitDefaults_FriendVoiceNewResp_2eproto_impl();
  friend void  protobuf_AddDesc_FriendVoiceNewResp_2eproto_impl();
  friend void protobuf_AssignDesc_FriendVoiceNewResp_2eproto();
  friend void protobuf_ShutdownFile_FriendVoiceNewResp_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<FriendVoiceNewResp_Result> FriendVoiceNewResp_Result_default_instance_;

// -------------------------------------------------------------------

class FriendVoiceNewResp_ObjNews : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jjd.FriendVoiceNewResp.ObjNews) */ {
 public:
  FriendVoiceNewResp_ObjNews();
  virtual ~FriendVoiceNewResp_ObjNews();

  FriendVoiceNewResp_ObjNews(const FriendVoiceNewResp_ObjNews& from);

  inline FriendVoiceNewResp_ObjNews& operator=(const FriendVoiceNewResp_ObjNews& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendVoiceNewResp_ObjNews& default_instance();

  static const FriendVoiceNewResp_ObjNews* internal_default_instance();

  void Swap(FriendVoiceNewResp_ObjNews* other);

  // implements Message ----------------------------------------------

  inline FriendVoiceNewResp_ObjNews* New() const { return New(NULL); }

  FriendVoiceNewResp_ObjNews* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendVoiceNewResp_ObjNews& from);
  void MergeFrom(const FriendVoiceNewResp_ObjNews& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FriendVoiceNewResp_ObjNews* other);
  void UnsafeMergeFrom(const FriendVoiceNewResp_ObjNews& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 forwardUserId = 1;
  bool has_forwarduserid() const;
  void clear_forwarduserid();
  static const int kForwardUserIdFieldNumber = 1;
  ::google::protobuf::int64 forwarduserid() const;
  void set_forwarduserid(::google::protobuf::int64 value);

  // optional string forwardAvatar = 2;
  bool has_forwardavatar() const;
  void clear_forwardavatar();
  static const int kForwardAvatarFieldNumber = 2;
  const ::std::string& forwardavatar() const;
  void set_forwardavatar(const ::std::string& value);
  void set_forwardavatar(const char* value);
  void set_forwardavatar(const char* value, size_t size);
  ::std::string* mutable_forwardavatar();
  ::std::string* release_forwardavatar();
  void set_allocated_forwardavatar(::std::string* forwardavatar);

  // optional string forwardNickname = 3;
  bool has_forwardnickname() const;
  void clear_forwardnickname();
  static const int kForwardNicknameFieldNumber = 3;
  const ::std::string& forwardnickname() const;
  void set_forwardnickname(const ::std::string& value);
  void set_forwardnickname(const char* value);
  void set_forwardnickname(const char* value, size_t size);
  ::std::string* mutable_forwardnickname();
  ::std::string* release_forwardnickname();
  void set_allocated_forwardnickname(::std::string* forwardnickname);

  // optional int64 forwardLevel = 4;
  bool has_forwardlevel() const;
  void clear_forwardlevel();
  static const int kForwardLevelFieldNumber = 4;
  ::google::protobuf::int64 forwardlevel() const;
  void set_forwardlevel(::google::protobuf::int64 value);

  // required int64 releaseTime = 5;
  bool has_releasetime() const;
  void clear_releasetime();
  static const int kReleaseTimeFieldNumber = 5;
  ::google::protobuf::int64 releasetime() const;
  void set_releasetime(::google::protobuf::int64 value);

  // optional string forwardComment = 6;
  bool has_forwardcomment() const;
  void clear_forwardcomment();
  static const int kForwardCommentFieldNumber = 6;
  const ::std::string& forwardcomment() const;
  void set_forwardcomment(const ::std::string& value);
  void set_forwardcomment(const char* value);
  void set_forwardcomment(const char* value, size_t size);
  ::std::string* mutable_forwardcomment();
  ::std::string* release_forwardcomment();
  void set_allocated_forwardcomment(::std::string* forwardcomment);

  // required int64 userId = 7;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 7;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // required string nickname = 8;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 8;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // required string avatar = 9;
  bool has_avatar() const;
  void clear_avatar();
  static const int kAvatarFieldNumber = 9;
  const ::std::string& avatar() const;
  void set_avatar(const ::std::string& value);
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  ::std::string* mutable_avatar();
  ::std::string* release_avatar();
  void set_allocated_avatar(::std::string* avatar);

  // required int64 level = 10;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 10;
  ::google::protobuf::int64 level() const;
  void set_level(::google::protobuf::int64 value);

  // required int64 voiceId = 11;
  bool has_voiceid() const;
  void clear_voiceid();
  static const int kVoiceIdFieldNumber = 11;
  ::google::protobuf::int64 voiceid() const;
  void set_voiceid(::google::protobuf::int64 value);

  // required string voiceName = 12;
  bool has_voicename() const;
  void clear_voicename();
  static const int kVoiceNameFieldNumber = 12;
  const ::std::string& voicename() const;
  void set_voicename(const ::std::string& value);
  void set_voicename(const char* value);
  void set_voicename(const char* value, size_t size);
  ::std::string* mutable_voicename();
  ::std::string* release_voicename();
  void set_allocated_voicename(::std::string* voicename);

  // required int64 voiceLength = 13;
  bool has_voicelength() const;
  void clear_voicelength();
  static const int kVoiceLengthFieldNumber = 13;
  ::google::protobuf::int64 voicelength() const;
  void set_voicelength(::google::protobuf::int64 value);

  // repeated string voicePic = 14;
  int voicepic_size() const;
  void clear_voicepic();
  static const int kVoicePicFieldNumber = 14;
  const ::std::string& voicepic(int index) const;
  ::std::string* mutable_voicepic(int index);
  void set_voicepic(int index, const ::std::string& value);
  void set_voicepic(int index, const char* value);
  void set_voicepic(int index, const char* value, size_t size);
  ::std::string* add_voicepic();
  void add_voicepic(const ::std::string& value);
  void add_voicepic(const char* value);
  void add_voicepic(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& voicepic() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_voicepic();

  // required int64 commentCount = 15;
  bool has_commentcount() const;
  void clear_commentcount();
  static const int kCommentCountFieldNumber = 15;
  ::google::protobuf::int64 commentcount() const;
  void set_commentcount(::google::protobuf::int64 value);

  // required int64 forwardCount = 16;
  bool has_forwardcount() const;
  void clear_forwardcount();
  static const int kForwardCountFieldNumber = 16;
  ::google::protobuf::int64 forwardcount() const;
  void set_forwardcount(::google::protobuf::int64 value);

  // required int64 likeCount = 17;
  bool has_likecount() const;
  void clear_likecount();
  static const int kLikeCountFieldNumber = 17;
  ::google::protobuf::int64 likecount() const;
  void set_likecount(::google::protobuf::int64 value);

  // required int64 playCount = 18;
  bool has_playcount() const;
  void clear_playcount();
  static const int kPlayCountFieldNumber = 18;
  ::google::protobuf::int64 playcount() const;
  void set_playcount(::google::protobuf::int64 value);

  // required string voiceDesc = 19;
  bool has_voicedesc() const;
  void clear_voicedesc();
  static const int kVoiceDescFieldNumber = 19;
  const ::std::string& voicedesc() const;
  void set_voicedesc(const ::std::string& value);
  void set_voicedesc(const char* value);
  void set_voicedesc(const char* value, size_t size);
  ::std::string* mutable_voicedesc();
  ::std::string* release_voicedesc();
  void set_allocated_voicedesc(::std::string* voicedesc);

  // required int64 voiceSize = 20;
  bool has_voicesize() const;
  void clear_voicesize();
  static const int kVoiceSizeFieldNumber = 20;
  ::google::protobuf::int64 voicesize() const;
  void set_voicesize(::google::protobuf::int64 value);

  // required bool likeState = 21 [default = false];
  bool has_likestate() const;
  void clear_likestate();
  static const int kLikeStateFieldNumber = 21;
  bool likestate() const;
  void set_likestate(bool value);

  // repeated string largeVoicePic = 22;
  int largevoicepic_size() const;
  void clear_largevoicepic();
  static const int kLargeVoicePicFieldNumber = 22;
  const ::std::string& largevoicepic(int index) const;
  ::std::string* mutable_largevoicepic(int index);
  void set_largevoicepic(int index, const ::std::string& value);
  void set_largevoicepic(int index, const char* value);
  void set_largevoicepic(int index, const char* value, size_t size);
  ::std::string* add_largevoicepic();
  void add_largevoicepic(const ::std::string& value);
  void add_largevoicepic(const char* value);
  void add_largevoicepic(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& largevoicepic() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_largevoicepic();

  // required string voicePath = 23;
  bool has_voicepath() const;
  void clear_voicepath();
  static const int kVoicePathFieldNumber = 23;
  const ::std::string& voicepath() const;
  void set_voicepath(const ::std::string& value);
  void set_voicepath(const char* value);
  void set_voicepath(const char* value, size_t size);
  ::std::string* mutable_voicepath();
  ::std::string* release_voicepath();
  void set_allocated_voicepath(::std::string* voicepath);

  // optional int64 voiceType = 24;
  bool has_voicetype() const;
  void clear_voicetype();
  static const int kVoiceTypeFieldNumber = 24;
  ::google::protobuf::int64 voicetype() const;
  void set_voicetype(::google::protobuf::int64 value);

  // optional int64 liveStatus = 25;
  bool has_livestatus() const;
  void clear_livestatus();
  static const int kLiveStatusFieldNumber = 25;
  ::google::protobuf::int64 livestatus() const;
  void set_livestatus(::google::protobuf::int64 value);

  // optional int64 liveTime = 26;
  bool has_livetime() const;
  void clear_livetime();
  static const int kLiveTimeFieldNumber = 26;
  ::google::protobuf::int64 livetime() const;
  void set_livetime(::google::protobuf::int64 value);

  // optional int64 nowTime = 27;
  bool has_nowtime() const;
  void clear_nowtime();
  static const int kNowTimeFieldNumber = 27;
  ::google::protobuf::int64 nowtime() const;
  void set_nowtime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:jjd.FriendVoiceNewResp.ObjNews)
 private:
  inline void set_has_forwarduserid();
  inline void clear_has_forwarduserid();
  inline void set_has_forwardavatar();
  inline void clear_has_forwardavatar();
  inline void set_has_forwardnickname();
  inline void clear_has_forwardnickname();
  inline void set_has_forwardlevel();
  inline void clear_has_forwardlevel();
  inline void set_has_releasetime();
  inline void clear_has_releasetime();
  inline void set_has_forwardcomment();
  inline void clear_has_forwardcomment();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_voiceid();
  inline void clear_has_voiceid();
  inline void set_has_voicename();
  inline void clear_has_voicename();
  inline void set_has_voicelength();
  inline void clear_has_voicelength();
  inline void set_has_commentcount();
  inline void clear_has_commentcount();
  inline void set_has_forwardcount();
  inline void clear_has_forwardcount();
  inline void set_has_likecount();
  inline void clear_has_likecount();
  inline void set_has_playcount();
  inline void clear_has_playcount();
  inline void set_has_voicedesc();
  inline void clear_has_voicedesc();
  inline void set_has_voicesize();
  inline void clear_has_voicesize();
  inline void set_has_likestate();
  inline void clear_has_likestate();
  inline void set_has_voicepath();
  inline void clear_has_voicepath();
  inline void set_has_voicetype();
  inline void clear_has_voicetype();
  inline void set_has_livestatus();
  inline void clear_has_livestatus();
  inline void set_has_livetime();
  inline void clear_has_livetime();
  inline void set_has_nowtime();
  inline void clear_has_nowtime();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> voicepic_;
  ::google::protobuf::RepeatedPtrField< ::std::string> largevoicepic_;
  ::google::protobuf::internal::ArenaStringPtr forwardavatar_;
  ::google::protobuf::internal::ArenaStringPtr forwardnickname_;
  ::google::protobuf::internal::ArenaStringPtr forwardcomment_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr avatar_;
  ::google::protobuf::internal::ArenaStringPtr voicename_;
  ::google::protobuf::internal::ArenaStringPtr voicedesc_;
  ::google::protobuf::internal::ArenaStringPtr voicepath_;
  ::google::protobuf::int64 forwarduserid_;
  ::google::protobuf::int64 forwardlevel_;
  ::google::protobuf::int64 releasetime_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int64 level_;
  ::google::protobuf::int64 voiceid_;
  ::google::protobuf::int64 voicelength_;
  ::google::protobuf::int64 commentcount_;
  ::google::protobuf::int64 forwardcount_;
  ::google::protobuf::int64 likecount_;
  ::google::protobuf::int64 playcount_;
  ::google::protobuf::int64 voicesize_;
  ::google::protobuf::int64 voicetype_;
  ::google::protobuf::int64 livestatus_;
  ::google::protobuf::int64 livetime_;
  ::google::protobuf::int64 nowtime_;
  bool likestate_;
  friend void  protobuf_InitDefaults_FriendVoiceNewResp_2eproto_impl();
  friend void  protobuf_AddDesc_FriendVoiceNewResp_2eproto_impl();
  friend void protobuf_AssignDesc_FriendVoiceNewResp_2eproto();
  friend void protobuf_ShutdownFile_FriendVoiceNewResp_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<FriendVoiceNewResp_ObjNews> FriendVoiceNewResp_ObjNews_default_instance_;

// -------------------------------------------------------------------

class FriendVoiceNewResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jjd.FriendVoiceNewResp) */ {
 public:
  FriendVoiceNewResp();
  virtual ~FriendVoiceNewResp();

  FriendVoiceNewResp(const FriendVoiceNewResp& from);

  inline FriendVoiceNewResp& operator=(const FriendVoiceNewResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendVoiceNewResp& default_instance();

  static const FriendVoiceNewResp* internal_default_instance();

  void Swap(FriendVoiceNewResp* other);

  // implements Message ----------------------------------------------

  inline FriendVoiceNewResp* New() const { return New(NULL); }

  FriendVoiceNewResp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendVoiceNewResp& from);
  void MergeFrom(const FriendVoiceNewResp& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FriendVoiceNewResp* other);
  void UnsafeMergeFrom(const FriendVoiceNewResp& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FriendVoiceNewResp_Result Result;
  typedef FriendVoiceNewResp_ObjNews ObjNews;

  // accessors -------------------------------------------------------

  // required int64 state = 1;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::google::protobuf::int64 state() const;
  void set_state(::google::protobuf::int64 value);

  // required string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional .jjd.FriendVoiceNewResp.Result result = 3;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  const ::jjd::FriendVoiceNewResp_Result& result() const;
  ::jjd::FriendVoiceNewResp_Result* mutable_result();
  ::jjd::FriendVoiceNewResp_Result* release_result();
  void set_allocated_result(::jjd::FriendVoiceNewResp_Result* result);

  // @@protoc_insertion_point(class_scope:jjd.FriendVoiceNewResp)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_result();
  inline void clear_has_result();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::jjd::FriendVoiceNewResp_Result* result_;
  ::google::protobuf::int64 state_;
  friend void  protobuf_InitDefaults_FriendVoiceNewResp_2eproto_impl();
  friend void  protobuf_AddDesc_FriendVoiceNewResp_2eproto_impl();
  friend void protobuf_AssignDesc_FriendVoiceNewResp_2eproto();
  friend void protobuf_ShutdownFile_FriendVoiceNewResp_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<FriendVoiceNewResp> FriendVoiceNewResp_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendVoiceNewResp_Result

// required int64 oldTime = 1;
inline bool FriendVoiceNewResp_Result::has_oldtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendVoiceNewResp_Result::set_has_oldtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendVoiceNewResp_Result::clear_has_oldtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendVoiceNewResp_Result::clear_oldtime() {
  oldtime_ = GOOGLE_LONGLONG(0);
  clear_has_oldtime();
}
inline ::google::protobuf::int64 FriendVoiceNewResp_Result::oldtime() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.Result.oldTime)
  return oldtime_;
}
inline void FriendVoiceNewResp_Result::set_oldtime(::google::protobuf::int64 value) {
  set_has_oldtime();
  oldtime_ = value;
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.Result.oldTime)
}

// required int64 newTime = 2;
inline bool FriendVoiceNewResp_Result::has_newtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendVoiceNewResp_Result::set_has_newtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendVoiceNewResp_Result::clear_has_newtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendVoiceNewResp_Result::clear_newtime() {
  newtime_ = GOOGLE_LONGLONG(0);
  clear_has_newtime();
}
inline ::google::protobuf::int64 FriendVoiceNewResp_Result::newtime() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.Result.newTime)
  return newtime_;
}
inline void FriendVoiceNewResp_Result::set_newtime(::google::protobuf::int64 value) {
  set_has_newtime();
  newtime_ = value;
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.Result.newTime)
}

// repeated .jjd.FriendVoiceNewResp.ObjNews objNews = 3;
inline int FriendVoiceNewResp_Result::objnews_size() const {
  return objnews_.size();
}
inline void FriendVoiceNewResp_Result::clear_objnews() {
  objnews_.Clear();
}
inline const ::jjd::FriendVoiceNewResp_ObjNews& FriendVoiceNewResp_Result::objnews(int index) const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.Result.objNews)
  return objnews_.Get(index);
}
inline ::jjd::FriendVoiceNewResp_ObjNews* FriendVoiceNewResp_Result::mutable_objnews(int index) {
  // @@protoc_insertion_point(field_mutable:jjd.FriendVoiceNewResp.Result.objNews)
  return objnews_.Mutable(index);
}
inline ::jjd::FriendVoiceNewResp_ObjNews* FriendVoiceNewResp_Result::add_objnews() {
  // @@protoc_insertion_point(field_add:jjd.FriendVoiceNewResp.Result.objNews)
  return objnews_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jjd::FriendVoiceNewResp_ObjNews >*
FriendVoiceNewResp_Result::mutable_objnews() {
  // @@protoc_insertion_point(field_mutable_list:jjd.FriendVoiceNewResp.Result.objNews)
  return &objnews_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jjd::FriendVoiceNewResp_ObjNews >&
FriendVoiceNewResp_Result::objnews() const {
  // @@protoc_insertion_point(field_list:jjd.FriendVoiceNewResp.Result.objNews)
  return objnews_;
}

// required int64 allCount = 4;
inline bool FriendVoiceNewResp_Result::has_allcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendVoiceNewResp_Result::set_has_allcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendVoiceNewResp_Result::clear_has_allcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendVoiceNewResp_Result::clear_allcount() {
  allcount_ = GOOGLE_LONGLONG(0);
  clear_has_allcount();
}
inline ::google::protobuf::int64 FriendVoiceNewResp_Result::allcount() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.Result.allCount)
  return allcount_;
}
inline void FriendVoiceNewResp_Result::set_allcount(::google::protobuf::int64 value) {
  set_has_allcount();
  allcount_ = value;
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.Result.allCount)
}

inline const FriendVoiceNewResp_Result* FriendVoiceNewResp_Result::internal_default_instance() {
  return &FriendVoiceNewResp_Result_default_instance_.get();
}
// -------------------------------------------------------------------

// FriendVoiceNewResp_ObjNews

// optional int64 forwardUserId = 1;
inline bool FriendVoiceNewResp_ObjNews::has_forwarduserid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendVoiceNewResp_ObjNews::set_has_forwarduserid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendVoiceNewResp_ObjNews::clear_has_forwarduserid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendVoiceNewResp_ObjNews::clear_forwarduserid() {
  forwarduserid_ = GOOGLE_LONGLONG(0);
  clear_has_forwarduserid();
}
inline ::google::protobuf::int64 FriendVoiceNewResp_ObjNews::forwarduserid() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.ObjNews.forwardUserId)
  return forwarduserid_;
}
inline void FriendVoiceNewResp_ObjNews::set_forwarduserid(::google::protobuf::int64 value) {
  set_has_forwarduserid();
  forwarduserid_ = value;
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.ObjNews.forwardUserId)
}

// optional string forwardAvatar = 2;
inline bool FriendVoiceNewResp_ObjNews::has_forwardavatar() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendVoiceNewResp_ObjNews::set_has_forwardavatar() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendVoiceNewResp_ObjNews::clear_has_forwardavatar() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendVoiceNewResp_ObjNews::clear_forwardavatar() {
  forwardavatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_forwardavatar();
}
inline const ::std::string& FriendVoiceNewResp_ObjNews::forwardavatar() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.ObjNews.forwardAvatar)
  return forwardavatar_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendVoiceNewResp_ObjNews::set_forwardavatar(const ::std::string& value) {
  set_has_forwardavatar();
  forwardavatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.ObjNews.forwardAvatar)
}
inline void FriendVoiceNewResp_ObjNews::set_forwardavatar(const char* value) {
  set_has_forwardavatar();
  forwardavatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jjd.FriendVoiceNewResp.ObjNews.forwardAvatar)
}
inline void FriendVoiceNewResp_ObjNews::set_forwardavatar(const char* value, size_t size) {
  set_has_forwardavatar();
  forwardavatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jjd.FriendVoiceNewResp.ObjNews.forwardAvatar)
}
inline ::std::string* FriendVoiceNewResp_ObjNews::mutable_forwardavatar() {
  set_has_forwardavatar();
  // @@protoc_insertion_point(field_mutable:jjd.FriendVoiceNewResp.ObjNews.forwardAvatar)
  return forwardavatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendVoiceNewResp_ObjNews::release_forwardavatar() {
  // @@protoc_insertion_point(field_release:jjd.FriendVoiceNewResp.ObjNews.forwardAvatar)
  clear_has_forwardavatar();
  return forwardavatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendVoiceNewResp_ObjNews::set_allocated_forwardavatar(::std::string* forwardavatar) {
  if (forwardavatar != NULL) {
    set_has_forwardavatar();
  } else {
    clear_has_forwardavatar();
  }
  forwardavatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), forwardavatar);
  // @@protoc_insertion_point(field_set_allocated:jjd.FriendVoiceNewResp.ObjNews.forwardAvatar)
}

// optional string forwardNickname = 3;
inline bool FriendVoiceNewResp_ObjNews::has_forwardnickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendVoiceNewResp_ObjNews::set_has_forwardnickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendVoiceNewResp_ObjNews::clear_has_forwardnickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendVoiceNewResp_ObjNews::clear_forwardnickname() {
  forwardnickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_forwardnickname();
}
inline const ::std::string& FriendVoiceNewResp_ObjNews::forwardnickname() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.ObjNews.forwardNickname)
  return forwardnickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendVoiceNewResp_ObjNews::set_forwardnickname(const ::std::string& value) {
  set_has_forwardnickname();
  forwardnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.ObjNews.forwardNickname)
}
inline void FriendVoiceNewResp_ObjNews::set_forwardnickname(const char* value) {
  set_has_forwardnickname();
  forwardnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jjd.FriendVoiceNewResp.ObjNews.forwardNickname)
}
inline void FriendVoiceNewResp_ObjNews::set_forwardnickname(const char* value, size_t size) {
  set_has_forwardnickname();
  forwardnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jjd.FriendVoiceNewResp.ObjNews.forwardNickname)
}
inline ::std::string* FriendVoiceNewResp_ObjNews::mutable_forwardnickname() {
  set_has_forwardnickname();
  // @@protoc_insertion_point(field_mutable:jjd.FriendVoiceNewResp.ObjNews.forwardNickname)
  return forwardnickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendVoiceNewResp_ObjNews::release_forwardnickname() {
  // @@protoc_insertion_point(field_release:jjd.FriendVoiceNewResp.ObjNews.forwardNickname)
  clear_has_forwardnickname();
  return forwardnickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendVoiceNewResp_ObjNews::set_allocated_forwardnickname(::std::string* forwardnickname) {
  if (forwardnickname != NULL) {
    set_has_forwardnickname();
  } else {
    clear_has_forwardnickname();
  }
  forwardnickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), forwardnickname);
  // @@protoc_insertion_point(field_set_allocated:jjd.FriendVoiceNewResp.ObjNews.forwardNickname)
}

// optional int64 forwardLevel = 4;
inline bool FriendVoiceNewResp_ObjNews::has_forwardlevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendVoiceNewResp_ObjNews::set_has_forwardlevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendVoiceNewResp_ObjNews::clear_has_forwardlevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendVoiceNewResp_ObjNews::clear_forwardlevel() {
  forwardlevel_ = GOOGLE_LONGLONG(0);
  clear_has_forwardlevel();
}
inline ::google::protobuf::int64 FriendVoiceNewResp_ObjNews::forwardlevel() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.ObjNews.forwardLevel)
  return forwardlevel_;
}
inline void FriendVoiceNewResp_ObjNews::set_forwardlevel(::google::protobuf::int64 value) {
  set_has_forwardlevel();
  forwardlevel_ = value;
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.ObjNews.forwardLevel)
}

// required int64 releaseTime = 5;
inline bool FriendVoiceNewResp_ObjNews::has_releasetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FriendVoiceNewResp_ObjNews::set_has_releasetime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FriendVoiceNewResp_ObjNews::clear_has_releasetime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FriendVoiceNewResp_ObjNews::clear_releasetime() {
  releasetime_ = GOOGLE_LONGLONG(0);
  clear_has_releasetime();
}
inline ::google::protobuf::int64 FriendVoiceNewResp_ObjNews::releasetime() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.ObjNews.releaseTime)
  return releasetime_;
}
inline void FriendVoiceNewResp_ObjNews::set_releasetime(::google::protobuf::int64 value) {
  set_has_releasetime();
  releasetime_ = value;
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.ObjNews.releaseTime)
}

// optional string forwardComment = 6;
inline bool FriendVoiceNewResp_ObjNews::has_forwardcomment() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FriendVoiceNewResp_ObjNews::set_has_forwardcomment() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FriendVoiceNewResp_ObjNews::clear_has_forwardcomment() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FriendVoiceNewResp_ObjNews::clear_forwardcomment() {
  forwardcomment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_forwardcomment();
}
inline const ::std::string& FriendVoiceNewResp_ObjNews::forwardcomment() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.ObjNews.forwardComment)
  return forwardcomment_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendVoiceNewResp_ObjNews::set_forwardcomment(const ::std::string& value) {
  set_has_forwardcomment();
  forwardcomment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.ObjNews.forwardComment)
}
inline void FriendVoiceNewResp_ObjNews::set_forwardcomment(const char* value) {
  set_has_forwardcomment();
  forwardcomment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jjd.FriendVoiceNewResp.ObjNews.forwardComment)
}
inline void FriendVoiceNewResp_ObjNews::set_forwardcomment(const char* value, size_t size) {
  set_has_forwardcomment();
  forwardcomment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jjd.FriendVoiceNewResp.ObjNews.forwardComment)
}
inline ::std::string* FriendVoiceNewResp_ObjNews::mutable_forwardcomment() {
  set_has_forwardcomment();
  // @@protoc_insertion_point(field_mutable:jjd.FriendVoiceNewResp.ObjNews.forwardComment)
  return forwardcomment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendVoiceNewResp_ObjNews::release_forwardcomment() {
  // @@protoc_insertion_point(field_release:jjd.FriendVoiceNewResp.ObjNews.forwardComment)
  clear_has_forwardcomment();
  return forwardcomment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendVoiceNewResp_ObjNews::set_allocated_forwardcomment(::std::string* forwardcomment) {
  if (forwardcomment != NULL) {
    set_has_forwardcomment();
  } else {
    clear_has_forwardcomment();
  }
  forwardcomment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), forwardcomment);
  // @@protoc_insertion_point(field_set_allocated:jjd.FriendVoiceNewResp.ObjNews.forwardComment)
}

// required int64 userId = 7;
inline bool FriendVoiceNewResp_ObjNews::has_userid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FriendVoiceNewResp_ObjNews::set_has_userid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FriendVoiceNewResp_ObjNews::clear_has_userid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FriendVoiceNewResp_ObjNews::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 FriendVoiceNewResp_ObjNews::userid() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.ObjNews.userId)
  return userid_;
}
inline void FriendVoiceNewResp_ObjNews::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.ObjNews.userId)
}

// required string nickname = 8;
inline bool FriendVoiceNewResp_ObjNews::has_nickname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FriendVoiceNewResp_ObjNews::set_has_nickname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FriendVoiceNewResp_ObjNews::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FriendVoiceNewResp_ObjNews::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& FriendVoiceNewResp_ObjNews::nickname() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.ObjNews.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendVoiceNewResp_ObjNews::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.ObjNews.nickname)
}
inline void FriendVoiceNewResp_ObjNews::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jjd.FriendVoiceNewResp.ObjNews.nickname)
}
inline void FriendVoiceNewResp_ObjNews::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jjd.FriendVoiceNewResp.ObjNews.nickname)
}
inline ::std::string* FriendVoiceNewResp_ObjNews::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:jjd.FriendVoiceNewResp.ObjNews.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendVoiceNewResp_ObjNews::release_nickname() {
  // @@protoc_insertion_point(field_release:jjd.FriendVoiceNewResp.ObjNews.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendVoiceNewResp_ObjNews::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:jjd.FriendVoiceNewResp.ObjNews.nickname)
}

// required string avatar = 9;
inline bool FriendVoiceNewResp_ObjNews::has_avatar() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FriendVoiceNewResp_ObjNews::set_has_avatar() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FriendVoiceNewResp_ObjNews::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FriendVoiceNewResp_ObjNews::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_avatar();
}
inline const ::std::string& FriendVoiceNewResp_ObjNews::avatar() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.ObjNews.avatar)
  return avatar_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendVoiceNewResp_ObjNews::set_avatar(const ::std::string& value) {
  set_has_avatar();
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.ObjNews.avatar)
}
inline void FriendVoiceNewResp_ObjNews::set_avatar(const char* value) {
  set_has_avatar();
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jjd.FriendVoiceNewResp.ObjNews.avatar)
}
inline void FriendVoiceNewResp_ObjNews::set_avatar(const char* value, size_t size) {
  set_has_avatar();
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jjd.FriendVoiceNewResp.ObjNews.avatar)
}
inline ::std::string* FriendVoiceNewResp_ObjNews::mutable_avatar() {
  set_has_avatar();
  // @@protoc_insertion_point(field_mutable:jjd.FriendVoiceNewResp.ObjNews.avatar)
  return avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendVoiceNewResp_ObjNews::release_avatar() {
  // @@protoc_insertion_point(field_release:jjd.FriendVoiceNewResp.ObjNews.avatar)
  clear_has_avatar();
  return avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendVoiceNewResp_ObjNews::set_allocated_avatar(::std::string* avatar) {
  if (avatar != NULL) {
    set_has_avatar();
  } else {
    clear_has_avatar();
  }
  avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:jjd.FriendVoiceNewResp.ObjNews.avatar)
}

// required int64 level = 10;
inline bool FriendVoiceNewResp_ObjNews::has_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FriendVoiceNewResp_ObjNews::set_has_level() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FriendVoiceNewResp_ObjNews::clear_has_level() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FriendVoiceNewResp_ObjNews::clear_level() {
  level_ = GOOGLE_LONGLONG(0);
  clear_has_level();
}
inline ::google::protobuf::int64 FriendVoiceNewResp_ObjNews::level() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.ObjNews.level)
  return level_;
}
inline void FriendVoiceNewResp_ObjNews::set_level(::google::protobuf::int64 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.ObjNews.level)
}

// required int64 voiceId = 11;
inline bool FriendVoiceNewResp_ObjNews::has_voiceid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FriendVoiceNewResp_ObjNews::set_has_voiceid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FriendVoiceNewResp_ObjNews::clear_has_voiceid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FriendVoiceNewResp_ObjNews::clear_voiceid() {
  voiceid_ = GOOGLE_LONGLONG(0);
  clear_has_voiceid();
}
inline ::google::protobuf::int64 FriendVoiceNewResp_ObjNews::voiceid() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.ObjNews.voiceId)
  return voiceid_;
}
inline void FriendVoiceNewResp_ObjNews::set_voiceid(::google::protobuf::int64 value) {
  set_has_voiceid();
  voiceid_ = value;
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.ObjNews.voiceId)
}

// required string voiceName = 12;
inline bool FriendVoiceNewResp_ObjNews::has_voicename() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FriendVoiceNewResp_ObjNews::set_has_voicename() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FriendVoiceNewResp_ObjNews::clear_has_voicename() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FriendVoiceNewResp_ObjNews::clear_voicename() {
  voicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_voicename();
}
inline const ::std::string& FriendVoiceNewResp_ObjNews::voicename() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.ObjNews.voiceName)
  return voicename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendVoiceNewResp_ObjNews::set_voicename(const ::std::string& value) {
  set_has_voicename();
  voicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.ObjNews.voiceName)
}
inline void FriendVoiceNewResp_ObjNews::set_voicename(const char* value) {
  set_has_voicename();
  voicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jjd.FriendVoiceNewResp.ObjNews.voiceName)
}
inline void FriendVoiceNewResp_ObjNews::set_voicename(const char* value, size_t size) {
  set_has_voicename();
  voicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jjd.FriendVoiceNewResp.ObjNews.voiceName)
}
inline ::std::string* FriendVoiceNewResp_ObjNews::mutable_voicename() {
  set_has_voicename();
  // @@protoc_insertion_point(field_mutable:jjd.FriendVoiceNewResp.ObjNews.voiceName)
  return voicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendVoiceNewResp_ObjNews::release_voicename() {
  // @@protoc_insertion_point(field_release:jjd.FriendVoiceNewResp.ObjNews.voiceName)
  clear_has_voicename();
  return voicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendVoiceNewResp_ObjNews::set_allocated_voicename(::std::string* voicename) {
  if (voicename != NULL) {
    set_has_voicename();
  } else {
    clear_has_voicename();
  }
  voicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voicename);
  // @@protoc_insertion_point(field_set_allocated:jjd.FriendVoiceNewResp.ObjNews.voiceName)
}

// required int64 voiceLength = 13;
inline bool FriendVoiceNewResp_ObjNews::has_voicelength() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FriendVoiceNewResp_ObjNews::set_has_voicelength() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FriendVoiceNewResp_ObjNews::clear_has_voicelength() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FriendVoiceNewResp_ObjNews::clear_voicelength() {
  voicelength_ = GOOGLE_LONGLONG(0);
  clear_has_voicelength();
}
inline ::google::protobuf::int64 FriendVoiceNewResp_ObjNews::voicelength() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.ObjNews.voiceLength)
  return voicelength_;
}
inline void FriendVoiceNewResp_ObjNews::set_voicelength(::google::protobuf::int64 value) {
  set_has_voicelength();
  voicelength_ = value;
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.ObjNews.voiceLength)
}

// repeated string voicePic = 14;
inline int FriendVoiceNewResp_ObjNews::voicepic_size() const {
  return voicepic_.size();
}
inline void FriendVoiceNewResp_ObjNews::clear_voicepic() {
  voicepic_.Clear();
}
inline const ::std::string& FriendVoiceNewResp_ObjNews::voicepic(int index) const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.ObjNews.voicePic)
  return voicepic_.Get(index);
}
inline ::std::string* FriendVoiceNewResp_ObjNews::mutable_voicepic(int index) {
  // @@protoc_insertion_point(field_mutable:jjd.FriendVoiceNewResp.ObjNews.voicePic)
  return voicepic_.Mutable(index);
}
inline void FriendVoiceNewResp_ObjNews::set_voicepic(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.ObjNews.voicePic)
  voicepic_.Mutable(index)->assign(value);
}
inline void FriendVoiceNewResp_ObjNews::set_voicepic(int index, const char* value) {
  voicepic_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:jjd.FriendVoiceNewResp.ObjNews.voicePic)
}
inline void FriendVoiceNewResp_ObjNews::set_voicepic(int index, const char* value, size_t size) {
  voicepic_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:jjd.FriendVoiceNewResp.ObjNews.voicePic)
}
inline ::std::string* FriendVoiceNewResp_ObjNews::add_voicepic() {
  // @@protoc_insertion_point(field_add_mutable:jjd.FriendVoiceNewResp.ObjNews.voicePic)
  return voicepic_.Add();
}
inline void FriendVoiceNewResp_ObjNews::add_voicepic(const ::std::string& value) {
  voicepic_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:jjd.FriendVoiceNewResp.ObjNews.voicePic)
}
inline void FriendVoiceNewResp_ObjNews::add_voicepic(const char* value) {
  voicepic_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:jjd.FriendVoiceNewResp.ObjNews.voicePic)
}
inline void FriendVoiceNewResp_ObjNews::add_voicepic(const char* value, size_t size) {
  voicepic_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:jjd.FriendVoiceNewResp.ObjNews.voicePic)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FriendVoiceNewResp_ObjNews::voicepic() const {
  // @@protoc_insertion_point(field_list:jjd.FriendVoiceNewResp.ObjNews.voicePic)
  return voicepic_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FriendVoiceNewResp_ObjNews::mutable_voicepic() {
  // @@protoc_insertion_point(field_mutable_list:jjd.FriendVoiceNewResp.ObjNews.voicePic)
  return &voicepic_;
}

// required int64 commentCount = 15;
inline bool FriendVoiceNewResp_ObjNews::has_commentcount() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FriendVoiceNewResp_ObjNews::set_has_commentcount() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FriendVoiceNewResp_ObjNews::clear_has_commentcount() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FriendVoiceNewResp_ObjNews::clear_commentcount() {
  commentcount_ = GOOGLE_LONGLONG(0);
  clear_has_commentcount();
}
inline ::google::protobuf::int64 FriendVoiceNewResp_ObjNews::commentcount() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.ObjNews.commentCount)
  return commentcount_;
}
inline void FriendVoiceNewResp_ObjNews::set_commentcount(::google::protobuf::int64 value) {
  set_has_commentcount();
  commentcount_ = value;
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.ObjNews.commentCount)
}

// required int64 forwardCount = 16;
inline bool FriendVoiceNewResp_ObjNews::has_forwardcount() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FriendVoiceNewResp_ObjNews::set_has_forwardcount() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FriendVoiceNewResp_ObjNews::clear_has_forwardcount() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FriendVoiceNewResp_ObjNews::clear_forwardcount() {
  forwardcount_ = GOOGLE_LONGLONG(0);
  clear_has_forwardcount();
}
inline ::google::protobuf::int64 FriendVoiceNewResp_ObjNews::forwardcount() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.ObjNews.forwardCount)
  return forwardcount_;
}
inline void FriendVoiceNewResp_ObjNews::set_forwardcount(::google::protobuf::int64 value) {
  set_has_forwardcount();
  forwardcount_ = value;
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.ObjNews.forwardCount)
}

// required int64 likeCount = 17;
inline bool FriendVoiceNewResp_ObjNews::has_likecount() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FriendVoiceNewResp_ObjNews::set_has_likecount() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FriendVoiceNewResp_ObjNews::clear_has_likecount() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FriendVoiceNewResp_ObjNews::clear_likecount() {
  likecount_ = GOOGLE_LONGLONG(0);
  clear_has_likecount();
}
inline ::google::protobuf::int64 FriendVoiceNewResp_ObjNews::likecount() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.ObjNews.likeCount)
  return likecount_;
}
inline void FriendVoiceNewResp_ObjNews::set_likecount(::google::protobuf::int64 value) {
  set_has_likecount();
  likecount_ = value;
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.ObjNews.likeCount)
}

// required int64 playCount = 18;
inline bool FriendVoiceNewResp_ObjNews::has_playcount() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void FriendVoiceNewResp_ObjNews::set_has_playcount() {
  _has_bits_[0] |= 0x00020000u;
}
inline void FriendVoiceNewResp_ObjNews::clear_has_playcount() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void FriendVoiceNewResp_ObjNews::clear_playcount() {
  playcount_ = GOOGLE_LONGLONG(0);
  clear_has_playcount();
}
inline ::google::protobuf::int64 FriendVoiceNewResp_ObjNews::playcount() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.ObjNews.playCount)
  return playcount_;
}
inline void FriendVoiceNewResp_ObjNews::set_playcount(::google::protobuf::int64 value) {
  set_has_playcount();
  playcount_ = value;
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.ObjNews.playCount)
}

// required string voiceDesc = 19;
inline bool FriendVoiceNewResp_ObjNews::has_voicedesc() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void FriendVoiceNewResp_ObjNews::set_has_voicedesc() {
  _has_bits_[0] |= 0x00040000u;
}
inline void FriendVoiceNewResp_ObjNews::clear_has_voicedesc() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void FriendVoiceNewResp_ObjNews::clear_voicedesc() {
  voicedesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_voicedesc();
}
inline const ::std::string& FriendVoiceNewResp_ObjNews::voicedesc() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.ObjNews.voiceDesc)
  return voicedesc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendVoiceNewResp_ObjNews::set_voicedesc(const ::std::string& value) {
  set_has_voicedesc();
  voicedesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.ObjNews.voiceDesc)
}
inline void FriendVoiceNewResp_ObjNews::set_voicedesc(const char* value) {
  set_has_voicedesc();
  voicedesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jjd.FriendVoiceNewResp.ObjNews.voiceDesc)
}
inline void FriendVoiceNewResp_ObjNews::set_voicedesc(const char* value, size_t size) {
  set_has_voicedesc();
  voicedesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jjd.FriendVoiceNewResp.ObjNews.voiceDesc)
}
inline ::std::string* FriendVoiceNewResp_ObjNews::mutable_voicedesc() {
  set_has_voicedesc();
  // @@protoc_insertion_point(field_mutable:jjd.FriendVoiceNewResp.ObjNews.voiceDesc)
  return voicedesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendVoiceNewResp_ObjNews::release_voicedesc() {
  // @@protoc_insertion_point(field_release:jjd.FriendVoiceNewResp.ObjNews.voiceDesc)
  clear_has_voicedesc();
  return voicedesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendVoiceNewResp_ObjNews::set_allocated_voicedesc(::std::string* voicedesc) {
  if (voicedesc != NULL) {
    set_has_voicedesc();
  } else {
    clear_has_voicedesc();
  }
  voicedesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voicedesc);
  // @@protoc_insertion_point(field_set_allocated:jjd.FriendVoiceNewResp.ObjNews.voiceDesc)
}

// required int64 voiceSize = 20;
inline bool FriendVoiceNewResp_ObjNews::has_voicesize() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void FriendVoiceNewResp_ObjNews::set_has_voicesize() {
  _has_bits_[0] |= 0x00080000u;
}
inline void FriendVoiceNewResp_ObjNews::clear_has_voicesize() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void FriendVoiceNewResp_ObjNews::clear_voicesize() {
  voicesize_ = GOOGLE_LONGLONG(0);
  clear_has_voicesize();
}
inline ::google::protobuf::int64 FriendVoiceNewResp_ObjNews::voicesize() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.ObjNews.voiceSize)
  return voicesize_;
}
inline void FriendVoiceNewResp_ObjNews::set_voicesize(::google::protobuf::int64 value) {
  set_has_voicesize();
  voicesize_ = value;
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.ObjNews.voiceSize)
}

// required bool likeState = 21 [default = false];
inline bool FriendVoiceNewResp_ObjNews::has_likestate() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void FriendVoiceNewResp_ObjNews::set_has_likestate() {
  _has_bits_[0] |= 0x00100000u;
}
inline void FriendVoiceNewResp_ObjNews::clear_has_likestate() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void FriendVoiceNewResp_ObjNews::clear_likestate() {
  likestate_ = false;
  clear_has_likestate();
}
inline bool FriendVoiceNewResp_ObjNews::likestate() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.ObjNews.likeState)
  return likestate_;
}
inline void FriendVoiceNewResp_ObjNews::set_likestate(bool value) {
  set_has_likestate();
  likestate_ = value;
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.ObjNews.likeState)
}

// repeated string largeVoicePic = 22;
inline int FriendVoiceNewResp_ObjNews::largevoicepic_size() const {
  return largevoicepic_.size();
}
inline void FriendVoiceNewResp_ObjNews::clear_largevoicepic() {
  largevoicepic_.Clear();
}
inline const ::std::string& FriendVoiceNewResp_ObjNews::largevoicepic(int index) const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.ObjNews.largeVoicePic)
  return largevoicepic_.Get(index);
}
inline ::std::string* FriendVoiceNewResp_ObjNews::mutable_largevoicepic(int index) {
  // @@protoc_insertion_point(field_mutable:jjd.FriendVoiceNewResp.ObjNews.largeVoicePic)
  return largevoicepic_.Mutable(index);
}
inline void FriendVoiceNewResp_ObjNews::set_largevoicepic(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.ObjNews.largeVoicePic)
  largevoicepic_.Mutable(index)->assign(value);
}
inline void FriendVoiceNewResp_ObjNews::set_largevoicepic(int index, const char* value) {
  largevoicepic_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:jjd.FriendVoiceNewResp.ObjNews.largeVoicePic)
}
inline void FriendVoiceNewResp_ObjNews::set_largevoicepic(int index, const char* value, size_t size) {
  largevoicepic_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:jjd.FriendVoiceNewResp.ObjNews.largeVoicePic)
}
inline ::std::string* FriendVoiceNewResp_ObjNews::add_largevoicepic() {
  // @@protoc_insertion_point(field_add_mutable:jjd.FriendVoiceNewResp.ObjNews.largeVoicePic)
  return largevoicepic_.Add();
}
inline void FriendVoiceNewResp_ObjNews::add_largevoicepic(const ::std::string& value) {
  largevoicepic_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:jjd.FriendVoiceNewResp.ObjNews.largeVoicePic)
}
inline void FriendVoiceNewResp_ObjNews::add_largevoicepic(const char* value) {
  largevoicepic_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:jjd.FriendVoiceNewResp.ObjNews.largeVoicePic)
}
inline void FriendVoiceNewResp_ObjNews::add_largevoicepic(const char* value, size_t size) {
  largevoicepic_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:jjd.FriendVoiceNewResp.ObjNews.largeVoicePic)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FriendVoiceNewResp_ObjNews::largevoicepic() const {
  // @@protoc_insertion_point(field_list:jjd.FriendVoiceNewResp.ObjNews.largeVoicePic)
  return largevoicepic_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FriendVoiceNewResp_ObjNews::mutable_largevoicepic() {
  // @@protoc_insertion_point(field_mutable_list:jjd.FriendVoiceNewResp.ObjNews.largeVoicePic)
  return &largevoicepic_;
}

// required string voicePath = 23;
inline bool FriendVoiceNewResp_ObjNews::has_voicepath() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void FriendVoiceNewResp_ObjNews::set_has_voicepath() {
  _has_bits_[0] |= 0x00400000u;
}
inline void FriendVoiceNewResp_ObjNews::clear_has_voicepath() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void FriendVoiceNewResp_ObjNews::clear_voicepath() {
  voicepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_voicepath();
}
inline const ::std::string& FriendVoiceNewResp_ObjNews::voicepath() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.ObjNews.voicePath)
  return voicepath_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendVoiceNewResp_ObjNews::set_voicepath(const ::std::string& value) {
  set_has_voicepath();
  voicepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.ObjNews.voicePath)
}
inline void FriendVoiceNewResp_ObjNews::set_voicepath(const char* value) {
  set_has_voicepath();
  voicepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jjd.FriendVoiceNewResp.ObjNews.voicePath)
}
inline void FriendVoiceNewResp_ObjNews::set_voicepath(const char* value, size_t size) {
  set_has_voicepath();
  voicepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jjd.FriendVoiceNewResp.ObjNews.voicePath)
}
inline ::std::string* FriendVoiceNewResp_ObjNews::mutable_voicepath() {
  set_has_voicepath();
  // @@protoc_insertion_point(field_mutable:jjd.FriendVoiceNewResp.ObjNews.voicePath)
  return voicepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendVoiceNewResp_ObjNews::release_voicepath() {
  // @@protoc_insertion_point(field_release:jjd.FriendVoiceNewResp.ObjNews.voicePath)
  clear_has_voicepath();
  return voicepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendVoiceNewResp_ObjNews::set_allocated_voicepath(::std::string* voicepath) {
  if (voicepath != NULL) {
    set_has_voicepath();
  } else {
    clear_has_voicepath();
  }
  voicepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voicepath);
  // @@protoc_insertion_point(field_set_allocated:jjd.FriendVoiceNewResp.ObjNews.voicePath)
}

// optional int64 voiceType = 24;
inline bool FriendVoiceNewResp_ObjNews::has_voicetype() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void FriendVoiceNewResp_ObjNews::set_has_voicetype() {
  _has_bits_[0] |= 0x00800000u;
}
inline void FriendVoiceNewResp_ObjNews::clear_has_voicetype() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void FriendVoiceNewResp_ObjNews::clear_voicetype() {
  voicetype_ = GOOGLE_LONGLONG(0);
  clear_has_voicetype();
}
inline ::google::protobuf::int64 FriendVoiceNewResp_ObjNews::voicetype() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.ObjNews.voiceType)
  return voicetype_;
}
inline void FriendVoiceNewResp_ObjNews::set_voicetype(::google::protobuf::int64 value) {
  set_has_voicetype();
  voicetype_ = value;
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.ObjNews.voiceType)
}

// optional int64 liveStatus = 25;
inline bool FriendVoiceNewResp_ObjNews::has_livestatus() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void FriendVoiceNewResp_ObjNews::set_has_livestatus() {
  _has_bits_[0] |= 0x01000000u;
}
inline void FriendVoiceNewResp_ObjNews::clear_has_livestatus() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void FriendVoiceNewResp_ObjNews::clear_livestatus() {
  livestatus_ = GOOGLE_LONGLONG(0);
  clear_has_livestatus();
}
inline ::google::protobuf::int64 FriendVoiceNewResp_ObjNews::livestatus() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.ObjNews.liveStatus)
  return livestatus_;
}
inline void FriendVoiceNewResp_ObjNews::set_livestatus(::google::protobuf::int64 value) {
  set_has_livestatus();
  livestatus_ = value;
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.ObjNews.liveStatus)
}

// optional int64 liveTime = 26;
inline bool FriendVoiceNewResp_ObjNews::has_livetime() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void FriendVoiceNewResp_ObjNews::set_has_livetime() {
  _has_bits_[0] |= 0x02000000u;
}
inline void FriendVoiceNewResp_ObjNews::clear_has_livetime() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void FriendVoiceNewResp_ObjNews::clear_livetime() {
  livetime_ = GOOGLE_LONGLONG(0);
  clear_has_livetime();
}
inline ::google::protobuf::int64 FriendVoiceNewResp_ObjNews::livetime() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.ObjNews.liveTime)
  return livetime_;
}
inline void FriendVoiceNewResp_ObjNews::set_livetime(::google::protobuf::int64 value) {
  set_has_livetime();
  livetime_ = value;
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.ObjNews.liveTime)
}

// optional int64 nowTime = 27;
inline bool FriendVoiceNewResp_ObjNews::has_nowtime() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void FriendVoiceNewResp_ObjNews::set_has_nowtime() {
  _has_bits_[0] |= 0x04000000u;
}
inline void FriendVoiceNewResp_ObjNews::clear_has_nowtime() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void FriendVoiceNewResp_ObjNews::clear_nowtime() {
  nowtime_ = GOOGLE_LONGLONG(0);
  clear_has_nowtime();
}
inline ::google::protobuf::int64 FriendVoiceNewResp_ObjNews::nowtime() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.ObjNews.nowTime)
  return nowtime_;
}
inline void FriendVoiceNewResp_ObjNews::set_nowtime(::google::protobuf::int64 value) {
  set_has_nowtime();
  nowtime_ = value;
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.ObjNews.nowTime)
}

inline const FriendVoiceNewResp_ObjNews* FriendVoiceNewResp_ObjNews::internal_default_instance() {
  return &FriendVoiceNewResp_ObjNews_default_instance_.get();
}
// -------------------------------------------------------------------

// FriendVoiceNewResp

// required int64 state = 1;
inline bool FriendVoiceNewResp::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendVoiceNewResp::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendVoiceNewResp::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendVoiceNewResp::clear_state() {
  state_ = GOOGLE_LONGLONG(0);
  clear_has_state();
}
inline ::google::protobuf::int64 FriendVoiceNewResp::state() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.state)
  return state_;
}
inline void FriendVoiceNewResp::set_state(::google::protobuf::int64 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.state)
}

// required string msg = 2;
inline bool FriendVoiceNewResp::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendVoiceNewResp::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendVoiceNewResp::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendVoiceNewResp::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& FriendVoiceNewResp::msg() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendVoiceNewResp::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jjd.FriendVoiceNewResp.msg)
}
inline void FriendVoiceNewResp::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jjd.FriendVoiceNewResp.msg)
}
inline void FriendVoiceNewResp::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jjd.FriendVoiceNewResp.msg)
}
inline ::std::string* FriendVoiceNewResp::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:jjd.FriendVoiceNewResp.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendVoiceNewResp::release_msg() {
  // @@protoc_insertion_point(field_release:jjd.FriendVoiceNewResp.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendVoiceNewResp::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:jjd.FriendVoiceNewResp.msg)
}

// optional .jjd.FriendVoiceNewResp.Result result = 3;
inline bool FriendVoiceNewResp::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendVoiceNewResp::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendVoiceNewResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendVoiceNewResp::clear_result() {
  if (result_ != NULL) result_->::jjd::FriendVoiceNewResp_Result::Clear();
  clear_has_result();
}
inline const ::jjd::FriendVoiceNewResp_Result& FriendVoiceNewResp::result() const {
  // @@protoc_insertion_point(field_get:jjd.FriendVoiceNewResp.result)
  return result_ != NULL ? *result_
                         : *::jjd::FriendVoiceNewResp_Result::internal_default_instance();
}
inline ::jjd::FriendVoiceNewResp_Result* FriendVoiceNewResp::mutable_result() {
  set_has_result();
  if (result_ == NULL) {
    result_ = new ::jjd::FriendVoiceNewResp_Result;
  }
  // @@protoc_insertion_point(field_mutable:jjd.FriendVoiceNewResp.result)
  return result_;
}
inline ::jjd::FriendVoiceNewResp_Result* FriendVoiceNewResp::release_result() {
  // @@protoc_insertion_point(field_release:jjd.FriendVoiceNewResp.result)
  clear_has_result();
  ::jjd::FriendVoiceNewResp_Result* temp = result_;
  result_ = NULL;
  return temp;
}
inline void FriendVoiceNewResp::set_allocated_result(::jjd::FriendVoiceNewResp_Result* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:jjd.FriendVoiceNewResp.result)
}

inline const FriendVoiceNewResp* FriendVoiceNewResp::internal_default_instance() {
  return &FriendVoiceNewResp_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace jjd

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FriendVoiceNewResp_2eproto__INCLUDED
